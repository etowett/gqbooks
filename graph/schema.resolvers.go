package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"encoding/json"
	"fmt"
	"gqbooks/graph/model"
	"os"
	"path/filepath"
)

func getBooksData() ([]*model.Book, error) {
	var books []*model.Book

	filePaths := []string{
		"res/a_color_of_his_own.json",
		"res/fishing_in_the_air.json",
	}

	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		return books, fmt.Errorf("could not get filepath: %v", err)
	}
	for _, path := range filePaths {
		var book *model.Book
		path := filepath.Join(dir, path)

		body, err := os.ReadFile(path)
		if err != nil {
			return books, fmt.Errorf("could not read %s: %v", path, err)
		}

		if err := json.Unmarshal(body, &book); err != nil {
			return books, fmt.Errorf("could not unmarshal: %v", err)
		}
		books = append(books, book)
	}
	return books, nil
}

func processBook(book *model.Book) *model.Book {
	for _, page := range book.Pages {
		var allCombined []*model.Combined
		for i, token := range page.Tokens {
			allCombined = append(allCombined, &model.Combined{
				Index:      &token.Position[0],
				Token:      &token.Value,
				Content:    token.Value,
				IsTappable: true,
			})

			// if it is not the last item in the list
			if len(page.Tokens)-1 > i {
				// loop values in beween
				for _, val := range page.Content[token.Position[1]:page.Tokens[i+1].Position[0]] {
					if string(val) == " " {
						allCombined = append(allCombined, &model.Combined{
							Content:    " ",
							IsTappable: false,
						})
					} else {
						allCombined = append(allCombined, &model.Combined{
							Content:    string(val),
							IsTappable: false,
						})
					}
				}
			}
			// If we are at the end
			if i == len(page.Tokens)-1 {
				// If we still have values at the end
				if token.Position[1] != len(page.Content) {
					// loop them
					for _, val := range page.Content[token.Position[1]:] {
						if string(val) == " " {
							allCombined = append(allCombined, &model.Combined{
								Content:    " ",
								IsTappable: false,
							})
						} else {
							allCombined = append(allCombined, &model.Combined{
								Content:    string(val),
								IsTappable: false,
							})
						}
					}
				}
			}
		}
		page.RefinedTokens = allCombined
	}
	return book
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	books, err := getBooksData()
	if err != nil {
		return books, fmt.Errorf("could not get books data: %v", err)
	}

	for _, book := range books {
		books = append(books, processBook(book))
	}

	return books, nil
}

// GetBook is the resolver for the getBook field.
func (r *queryResolver) GetBook(ctx context.Context, title string) (*model.Book, error) {
	books, err := getBooksData()
	if err != nil {
		return &model.Book{}, fmt.Errorf("could not get books data: %v", err)
	}
	for _, book := range books {
		if book.Title == title {
			return processBook(book), nil
		}
		books = append(books, processBook(book))
	}
	return &model.Book{}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
